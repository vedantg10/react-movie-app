{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty(_ref) {\n  let {\n    size,\n    grid\n  } = _ref;\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nfunction fontGrid(_ref2) {\n  let {\n    lineHeight,\n    pixels,\n    htmlFontSize\n  } = _ref2;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nfunction responsiveProperty(_ref3) {\n  let {\n    cssProperty,\n    min,\n    max,\n    unit = 'rem',\n    breakpoints = [600, 900, 1200],\n    transform = null\n  } = _ref3;\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","alignProperty","convertLength","fontGrid","getUnit","isUnitless","responsiveProperty","toUnitless","String","parseFloat","length","input","match","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","size","grid","sizeBelow","sizeAbove","lineHeight","pixels","htmlFontSize","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"sources":["/Users/vedant/Documents/React Learning/movie-app/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}